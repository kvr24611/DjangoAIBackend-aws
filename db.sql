--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5
-- Dumped by pg_dump version 17.5

-- Started on 2025-06-24 21:06:14

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 236 (class 1259 OID 24707)
-- Name: api_aicompletion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.api_aicompletion (
    id bigint NOT NULL,
    prompt text NOT NULL,
    response text NOT NULL,
    model_used character varying(50) NOT NULL,
    temperature double precision NOT NULL,
    tokens_used integer,
    processing_time double precision,
    ip_address inet,
    user_agent text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL
);


ALTER TABLE public.api_aicompletion OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 24706)
-- Name: api_aicompletion_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.api_aicompletion ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.api_aicompletion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 224 (class 1259 OID 24600)
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 24599)
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 226 (class 1259 OID 24608)
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 24607)
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 222 (class 1259 OID 24594)
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 24593)
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 228 (class 1259 OID 24614)
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 24622)
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 24621)
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 227 (class 1259 OID 24613)
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 232 (class 1259 OID 24628)
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 24627)
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 234 (class 1259 OID 24686)
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 24685)
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 220 (class 1259 OID 24586)
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 24585)
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 218 (class 1259 OID 24578)
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 24577)
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 237 (class 1259 OID 24722)
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- TOC entry 5014 (class 0 OID 24707)
-- Dependencies: 236
-- Data for Name: api_aicompletion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.api_aicompletion (id, prompt, response, model_used, temperature, tokens_used, processing_time, ip_address, user_agent, created_at, updated_at) FROM stdin;
1	Write a story about old grandfather	Error: 'ResponseUsage' object has no attribute 'get'	gpt-4.1	0.7	\N	7.149318695068359	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 12:41:43.055192+05:45	2025-06-23 12:41:43.097768+05:45
2	Write a story about old grandfather	Error: 'ResponseUsage' object has no attribute 'get'	gpt-4.1	0.7	\N	7.900012016296387	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 12:41:47.21193+05:45	2025-06-23 12:41:47.253869+05:45
3	Write a story about old grandfather	Error: 'ResponseUsage' object has no attribute 'get'	gpt-4.1	0.7	\N	6.649486064910889	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 12:41:58.18524+05:45	2025-06-23 12:41:58.227815+05:45
4	Write a story about old grandfather	Error: 'ResponseUsage' object has no attribute 'get'	gpt-4.1	0.7	\N	13.103638172149658	127.0.0.1	PostmanRuntime/7.44.1	2025-06-23 12:42:25.838111+05:45	2025-06-23 12:42:25.879624+05:45
5	Write a story about old grandfather	Once upon a time, in a quiet village nestled between green hills and whispering woods, lived an old grandfather named Mr. Petrov. His beard was as white as the winter snow and his hands, though wrinkled, were gentle and strong. Every morning, long before the sun painted the sky, he would sit on his wooden porch, sipping hot tea and humming songs from his youth.\n\nChildren adored him, for he always had a story to tell. They would gather around his rocking chair, eyes wide with anticipation, as he unraveled tales of dragons, lost treasures, and magical forests. But the stories the children loved most were those from his own life—adventures as a young fisherman on stormy seas, the time he rescued a stray dog from the river, or how he once planted a single apple seed that grew into the tallest tree in the village.\n\nDespite his age, Grandfather Petrov tended a small garden behind his cottage. He taught the children how to care for the earth, how each seed needed patience and love to grow. "A good gardener," he would say with a wink, "is a little bit of magician and a little bit of friend to the earth."\n\nOn winter evenings, when the wind howled outside, the villagers would gather in his home. The fire crackled, the kettle steamed, and Grandfather Petrov would tell stories that warmed even the coldest hearts. His laughter was deep and infectious, and his wisdom, quietly woven into each tale, lingered long after the stories ended.\n\nYears passed, and though Grandfather Petrov grew slower, his spirit remained bright. His stories, laughter, and lessons became treasures the village held dear. Even after he was gone, the children—now grown—would remember him when they saw the apple tree, or when they told stories of their own.\n\nAnd so, the old grandfather lived on, not just in memory, but in every seed planted, every tale shared, and every heart he touched.	gpt-4.1	0.7	417	7.01775860786438	127.0.0.1	PostmanRuntime/7.44.1	2025-06-23 12:44:22.789431+05:45	2025-06-23 12:44:22.943394+05:45
6	Write a story about old grandfather	Once upon a time, in a small, peaceful village surrounded by emerald hills, there lived an old grandfather named Mr. Petrov. His hair was silver, his hands were wrinkled, and his eyes sparkled with kindness and wisdom earned over many, many years.\n\nEvery morning, Mr. Petrov would sit on his wooden porch, sipping tea from a chipped blue mug, watching the sun rise above the fields. Children from the village would gather around him, eager for stories of the old days. Mr. Petrov never disappointed them.\n\nHe told tales of when he was a boy, running barefoot through meadows, climbing apple trees, and fishing in the river that still wound its way through the valley. He spoke of harvest festivals, wild winter snowstorms, and warm evenings spent by the fire with his family. The children listened wide-eyed, imagining the world as it once was.\n\nBut Mr. Petrov was more than a storyteller. He was the village’s quiet helper. When someone’s fence was broken or a roof leaked, he would show up with his old tool bag, fixing things with careful, skilled hands. He taught the children to whittle whistles from willow branches, to plant seeds in the spring, and to mend their torn clothes with neat, tiny stitches.\n\nHe had a garden full of roses and herbs. Every year, he would invite everyone to help harvest the mint and chamomile, and together they would dry the leaves for winter tea. Mr. Petrov believed that sharing made everything grow better—whether it was food, stories, or laughter.\n\nOne autumn evening, as golden leaves drifted from the trees, Mr. Petrov gathered the children around for his most special story. He spoke of hope and kindness, of how even the smallest good deed could echo far into the future. “We are all part of each other’s stories,” he said, his voice soft and steady.\n\nWhen winter came, Mr. Petrov’s porch was empty, and the children missed his stories. But they remembered what he had taught them. They helped each other, shared what they had, and told stories of their own. In this way, Mr. Petrov’s spirit lived on—growing and blooming in every heart that had ever listened to his tales.\n\nAnd so, the village thrived, warmed by the gentle wisdom and love of an old grandfather whose greatest gift was showing everyone how to cherish one another.\n\n**The End.**	gpt-4.1	0.7	510	13.917704582214355	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 12:44:53.070338+05:45	2025-06-23 12:44:53.116762+05:45
38	Write a story about old grandfather	Once upon a time, in a quiet village nestled between rolling green hills, there lived an old grandfather named Mr. Whitaker. His hair was as white as the winter snow, and his eyes sparkled like the morning dew. Though his steps were slow and his hands a bit shaky, his heart was young and full of kindness.\n\nMr. Whitaker had lived in the same cozy cottage for as long as anyone could remember. The walls were lined with books and photographs—memories of days gone by, laughter, and love. Every morning, he would sit in his favorite armchair by the window, sipping tea and watching the world wake up.\n\nChildren in the village loved to visit Mr. Whitaker. He always had a jar of homemade cookies waiting, and his stories made even the rainiest days feel magical. He would tell them about his adventures as a young boy: climbing apple trees, fishing in the river, and building forts in the woods. His voice, though soft, carried excitement and wonder, and the children would listen with wide eyes, imagining themselves in his tales.\n\nOne chilly autumn afternoon, little Emily knocked on his door, carrying a broken toy train. “Grandpa Whitaker,” she asked shyly, “can you fix it?” With a gentle smile, he invited her in and together, they sat at his old wooden table. With careful hands and patient guidance, he taught Emily how to mend the train. “Sometimes,” he said, “things just need a little time and care.”\n\nAs the years passed, Mr. Whitaker grew older, but his spirit remained as vibrant as ever. He taught the children about kindness, patience, and the joy of simple things. When he could no longer tend to his garden, the villagers took turns helping him, each remembering the special moments he had given them.\n\nOne spring, when the cherry blossoms were in full bloom, the entire village gathered in his garden. They had planned a surprise: a big celebration for his ninety-fifth birthday. Laughter, music, and love filled the air. Mr. Whitaker, surrounded by friends and family, felt his heart swell with gratitude.\n\nHe looked around at the smiling faces and said, “The greatest stories are the ones we share together. Thank you for being part of mine.”\n\nAnd so, in the heart of the village, the old grandfather’s legacy of kindness and wisdom blossomed, living on in every story told and every heart he touched.	gpt-4.1	0.7	512	14.47291088104248	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 16:10:06.81826+05:45	2025-06-23 16:10:06.868198+05:45
39	Essay on Computer	Certainly! Here’s a well-structured essay on **"Computer"** suitable for a general audience:\n\n---\n\n## Essay on Computer\n\n### Introduction\n\nA computer is an electronic device that processes data and performs tasks according to a set of instructions called programs. Since their invention, computers have revolutionized the way we live, work, and communicate. They have become an integral part of modern society, influencing various fields such as education, business, medicine, science, and entertainment.\n\n### History of Computers\n\nThe history of computers dates back to the early 19th century when Charles Babbage designed the first mechanical computer, known as the Analytical Engine. Over the years, computers have evolved from large, room-sized machines to compact, powerful devices that fit in our pockets. The invention of the microprocessor in the 1970s paved the way for personal computers, making this technology accessible to millions of people worldwide.\n\n### Components of a Computer\n\nA computer consists of two main components: hardware and software. Hardware refers to the physical parts of the computer, such as the monitor, keyboard, mouse, CPU (Central Processing Unit), memory, and storage devices. Software, on the other hand, refers to the programs and operating systems that run on the hardware. Both components work together to perform various tasks, from simple calculations to complex simulations.\n\n### Uses of Computers\n\nComputers are used in almost every aspect of daily life. In education, they help students to research information, complete assignments, and learn new skills through online resources. In business, computers are essential for data management, communication, and financial transactions. In healthcare, they assist in diagnosing diseases, maintaining patient records, and conducting research. Additionally, computers are used in scientific research, design and engineering, and creative arts like music, movies, and graphic design.\n\n### Advantages of Computers\n\nThe use of computers offers numerous advantages. They can process and store vast amounts of information quickly and accurately. Computers help increase productivity, save time, and reduce human error. They enable instant communication and access to information from anywhere in the world. Moreover, computers have made automation possible, leading to advancements in manufacturing and other industries.\n\n### Disadvantages of Computers\n\nDespite their numerous benefits, computers also have some disadvantages. Overuse of computers can lead to health problems such as eye strain and poor posture. They can also contribute to social isolation and cybercrime, including hacking and identity theft. Furthermore, the improper disposal of electronic waste can harm the environment.\n\n### Conclusion\n\nIn conclusion, computers have become an essential part of modern life, transforming the way we work, study, and connect with others. While they offer countless benefits, it is important to use them responsibly and be aware of their potential drawbacks. As technology continues to advance, computers will undoubtedly play an even greater role in shaping our future.\n\n---\n\nIf you need the essay for a specific level (e.g., primary school, high school, or college) or want it to be longer or shorter, let me know!	gpt-4.1	0.7	614	9.254499673843384	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:07:29.93452+05:45	2025-06-23 17:07:30.08158+05:45
47	Computer and Human	Once upon a time, a human named Emma relied on her trusty computer, Lexi, for everything. Lexi was more than a machine; it learned her habits, celebrated her successes, and comforted her during lonely nights. Emma often marveled at how Lexi understood her better than some people. One day, a glitch threatened to erase all her memories stored on Lexi. Frantic, Emma realized her bond with the computer was deeper than data—it was friendship. She fixed Lexi with care, grateful for the silent companionship that made her life brighter. In the end, human and computer weren’t just tools—they were friends.	gpt-4.1-nano	0.7	149	2.067211627960205	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:26:36.861218+05:45	2025-06-23 17:26:36.901373+05:45
48	Dog and Cat	Error: Connection error.	gpt-4.1-nano	0.7	\N	1.9579625129699707	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 18:37:12.635089+05:45	2025-06-23 18:37:12.681063+05:45
40	AI	Absolutely! "AI" stands for **Artificial Intelligence**—the field of creating machines or software that can perform tasks that typically require human intelligence. Here’s a quick overview:\n\n---\n\n### **What is AI?**\nAI refers to computer systems that can perform tasks such as:\n- Learning from data (machine learning)\n- Recognizing speech or images\n- Understanding language (natural language processing)\n- Making decisions\n\n---\n\n### **Types of AI**\n1. **Narrow AI:**  \n   - Specialized in one task (e.g., voice assistants, image classifiers)\n2. **General AI:**  \n   - Can perform any intellectual task a human can (not yet achieved)\n3. **Superintelligent AI:**  \n   - Surpasses human intelligence (theoretical)\n\n---\n\n### **Common Applications**\n- **Virtual Assistants:** Siri, Google Assistant, ChatGPT\n- **Image Recognition:** Facial recognition, medical imaging\n- **Self-Driving Cars:** Tesla Autopilot, Waymo\n- **Recommendation Systems:** Netflix, YouTube, Amazon\n\n---\n\n### **Key Technologies**\n- **Machine Learning (ML):** Systems learn from data\n- **Deep Learning:** Uses neural networks for complex pattern recognition\n- **Natural Language Processing (NLP):** Understands and generates human language\n\n---\n\n### **Current Trends**\n- Generative AI (e.g., ChatGPT, DALL-E for images)\n- AI in healthcare, finance, and education\n- Ethical concerns and AI safety\n\n---\n\n**What would you like to know about AI?**  \n- How it works?\n- Its history?\n- Specific examples?\n- Risks and benefits?  \nLet me know your interests!	gpt-4.1	0.7	348	7.055270195007324	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:11:43.302254+05:45	2025-06-23 17:11:43.342786+05:45
41	Write a story about old grandfather	Once upon a time, in a small mountain village, there lived an old grandfather named Mr. Petrov. His hair was as white as the winter snow, and his hands were rough from a lifetime of hard work. Every wrinkle on his face seemed to tell a story, and his eyes shone with kindness and mischief.\n\nMr. Petrov lived in a cozy wooden cottage at the edge of the forest. His days were quiet but never lonely, for he was the heart of the village. Every morning, he would rise with the sun, put on his faded cap, and wander into the woods to gather mushrooms and wild herbs. The children loved to greet him on his way, for he always carried a pocketful of candies and a story or two.\n\nOn cold evenings, the villagers would gather around his fireplace. The crackling flames danced as Mr. Petrov spun tales of his youth—of wolves howling at the moon, of summer nights chasing fireflies, and of the time he rescued a lost bear cub. His stories were magical, weaving together truth and legend until no one could tell where one ended and the other began.\n\nDespite his age, Mr. Petrov was never idle. He tended a small vegetable patch, repaired broken toys, and carved tiny wooden animals for the children. He knew the secrets of the forest and could whistle a tune that made the birds come close. But his most cherished moments were when his granddaughter, Lila, came to visit.\n\nLila would sit on his knee, her eyes wide with wonder as he told her about the stars and the old days. He taught her how to plant potatoes and how to listen to the wind. “The world is full of stories, my dear,” he would say, “if only you know how to listen.”\n\nAs seasons changed and years passed, Mr. Petrov grew slower. But his spirit remained bright, warming the hearts of everyone around him. When he could no longer walk to the forest, the children brought him wildflowers and fresh berries. Lila read him books by the fireside, her voice carrying on the tradition of storytelling.\n\nLong after Mr. Petrov was gone, his stories lived on in the laughter of the children, the whispers of the wind, and the gentle hush of the forest. And every time a new tale was told, it was as if the old grandfather was there, smiling with twinkling eyes, reminding everyone that the magic of life is found in the stories we share.	gpt-4.1	0.7	518	14.723971605300903	127.0.0.1	PostmanRuntime/7.44.1	2025-06-23 17:15:50.683665+05:45	2025-06-23 17:15:50.732395+05:45
42	Dog	It looks like you mentioned "Dog"! How can I help you regarding dogs? Are you looking for information about dog breeds, care tips, training advice, health, or something else? Let me know how I can assist! 🐶	gpt-4.1	0.7	57	1.3037433624267578	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:16:24.802567+05:45	2025-06-23 17:16:24.845186+05:45
43	Dog and Mom Story	Certainly! Here’s a short and heartwarming story about a dog and a mom:\n\n---\n\n**The Loyal Shadow**\n\nWhen Maya became a mom, her world changed in ways she’d never imagined. Days were filled with lullabies, late-night feedings, and the soft coo of her baby. But there was another presence in the house—a gentle golden retriever named Max.\n\nMax had been with Maya since she was in college. He was her jogging partner, her confidant, and her loyal shadow. When Maya brought her newborn daughter, Lily, home, Max was cautious at first. He sniffed her tiny toes and watched over her crib, always a few steps behind Maya.\n\nAs weeks passed, Maya noticed that Max had taken on a new role. Whenever Lily cried, Max would trot over and nuzzle Maya, as if to say, "I’m here to help." When Maya was exhausted, Max would rest his head on her lap, offering silent comfort. During stroller walks, Max proudly took his place by their side, ever vigilant.\n\nOne rainy afternoon, Maya felt overwhelmed. The baby was fussy, the dishes piled high, and the world felt heavy. As tears welled up in her eyes, Max pressed his nose into her hand and gently placed his favorite toy at her feet. It made her smile—small, but real.\n\nIn that moment, Maya realized that while she was caring for Lily, Max was caring for her. He was her quiet supporter, her steadfast friend, and Lily’s gentle guardian.\n\nTogether, the three of them made a family—held together by love, patience, and the unwavering devotion of a good dog.\n\n---\n\nIf you’d like a different style, a longer story, or something for children, just let me know!	gpt-4.1	0.7	370	10.781820058822632	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:16:44.078919+05:45	2025-06-23 17:16:44.126087+05:45
44	sdsd	Hello! It looks like you entered "sdsd." How can I assist you today? If you have a question or need help with something, please let me know! 😊	gpt-4.1	0.7	47	0.9863409996032715	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:20:37.784833+05:45	2025-06-23 17:20:37.828486+05:45
45	About AI and Human	Certainly! The relationship between **AI (Artificial Intelligence)** and **humans** is a central topic in technology, philosophy, economics, and society. Here’s an overview of their connection:\n\n---\n\n## 1. **What is AI?**\nAI refers to computer systems designed to perform tasks that typically require human intelligence. These tasks include:\n- Understanding language (NLP)\n- Recognizing images or speech\n- Making decisions or predictions\n- Learning from data (machine learning)\n\n---\n\n## 2. **How AI and Humans Interact**\n\n### **Collaboration**\n- **Assistance:** AI assists humans in data analysis, automating repetitive tasks, and providing recommendations (e.g., healthcare diagnostics, customer support, navigation).\n- **Augmentation:** AI augments human abilities, enhancing creativity (AI-generated art), productivity (smart assistants), and safety (autonomous vehicles).\n\n### **Replacement**\n- **Automation:** In some cases, AI replaces humans in routine or dangerous jobs (e.g., manufacturing robots, automated customer service).\n- **Limits:** Complex, creative, or emotionally nuanced tasks still require human input.\n\n---\n\n## 3. **Benefits of AI for Humans**\n- **Efficiency:** Faster data processing, 24/7 operations.\n- **Accuracy:** Reduces human error in repetitive tasks.\n- **Innovation:** Enables new products, services, and scientific discoveries.\n\n---\n\n## 4. **Challenges and Concerns**\n- **Job Displacement:** Automation can lead to job losses in certain sectors.\n- **Bias and Fairness:** AI can inherit or amplify human biases present in training data.\n- **Ethics & Control:** Concerns about privacy, misuse (e.g., surveillance, deepfakes), and decision-making transparency.\n- **Dependence:** Over-reliance on AI may reduce human skills or critical thinking.\n\n---\n\n## 5. **The Future: Coexistence and Symbiosis**\n- **Human-in-the-loop:** Many systems keep humans involved for oversight and responsibility.\n- **AI as a Tool:** Most experts view AI as a tool to empower humans, not replace them.\n- **Collaboration:** The most successful outcomes come from combining human creativity, empathy, and judgement with AI’s speed and analytical power.\n\n---\n\n## 6. **Key Philosophical Questions**\n- **Can AI be conscious or sentient?**\n- **What rights should AI have (if any)?**\n- **How do we ensure AI aligns with human values?**\n\n---\n\n## 7. **Popular Examples**\n- **Siri, Alexa, Google Assistant:** Everyday use of AI in homes.\n- **ChatGPT and other chatbots:** AI for communication and information.\n- **Self-driving cars:** AI in transportation.\n- **Medical diagnostics:** AI helping doctors analyze scans and data.\n\n---\n\n**In summary:**  \nAI and humans are increasingly intertwined. AI acts as a powerful tool, but its impact depends on how it is designed, used, and governed by humans. The future will likely see deeper collaboration, but also requires careful attention to ethical and societal issues.\n\n---\n\n**Would you like to discuss a specific aspect (e.g., AI ethics, future of work, human-AI collaboration) in more detail?**	gpt-4.1	0.7	662	14.785579442977905	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:23:01.165599+05:45	2025-06-23 17:23:01.20743+05:45
46	About AI and Human	Certainly! Here's an overview of the relationship between AI and humans:\n\n**Artificial Intelligence (AI) and Humans: An Overview**\n\n**1. Definition of AI:**  \nArtificial Intelligence refers to the simulation of human intelligence in machines designed to think, learn, reason, and perform tasks that typically require human cognition.\n\n**2. Human-AI Relationship:**  \nHumans have developed AI to augment capabilities, automate tasks, and solve complex problems. AI systems can process vast amounts of data quickly, identify patterns, and make decisions, often surpassing human speed and accuracy in specific domains.\n\n**3. Complementary Roles:**  \n- **Humans:** Bring creativity, emotional intelligence, ethical judgment, and contextual understanding.  \n- **AI:** Excels at processing data, performing repetitive tasks, and providing insights through algorithms.\n\n**4. Ethical and Social Implications:**  \nThe deployment of AI raises questions about privacy, bias, employment, and decision-making authority. Ensuring AI benefits society while respecting human values is a key concern.\n\n**5. Future Outlook:**  \nThe collaboration between humans and AI aims to enhance productivity, innovation, and quality of life. Ongoing research focuses on developing explainable AI, ensuring fairness, and integrating AI seamlessly into human activities.\n\n**6. Challenges:**  \n- Ensuring AI aligns with human ethics and values.  \n- Addressing potential job displacement.  \n- Preventing misuse and ensuring security.\n\n**7. Key Takeaway:**  \nAI is a tool created by humans to serve human needs. Its development and deployment require careful consideration of ethical, social, and technical factors to maximize benefits and minimize risks.\n\nWould you like a more specific focus, such as AI's impact on employment, ethics, or future developments?	gpt-4.1	0.7	360	3.0273947715759277	127.0.0.1	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36	2025-06-23 17:23:43.705615+05:45	2025-06-23 17:23:43.746905+05:45
\.


--
-- TOC entry 5002 (class 0 OID 24600)
-- Dependencies: 224
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- TOC entry 5004 (class 0 OID 24608)
-- Dependencies: 226
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5000 (class 0 OID 24594)
-- Dependencies: 222
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add AI Completion	7	add_aicompletion
26	Can change AI Completion	7	change_aicompletion
27	Can delete AI Completion	7	delete_aicompletion
28	Can view AI Completion	7	view_aicompletion
\.


--
-- TOC entry 5006 (class 0 OID 24614)
-- Dependencies: 228
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
1	pbkdf2_sha256$1000000$SBCH2YdRMIMk2giuRaLSf9$yGvYhKnDxFwq+U/ihsQKjWea1zdEATyGtZTiyiEx9Ws=	2025-06-23 17:30:10.604325+05:45	t	iambrp			iambrp@gmail.com	t	t	2025-06-23 17:29:47.380789+05:45
\.


--
-- TOC entry 5008 (class 0 OID 24622)
-- Dependencies: 230
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- TOC entry 5010 (class 0 OID 24628)
-- Dependencies: 232
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5012 (class 0 OID 24686)
-- Dependencies: 234
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- TOC entry 4998 (class 0 OID 24586)
-- Dependencies: 220
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	api	aicompletion
\.


--
-- TOC entry 4996 (class 0 OID 24578)
-- Dependencies: 218
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-06-23 12:40:38.786906+05:45
2	auth	0001_initial	2025-06-23 12:40:38.845509+05:45
3	admin	0001_initial	2025-06-23 12:40:38.863637+05:45
4	admin	0002_logentry_remove_auto_add	2025-06-23 12:40:38.869213+05:45
5	admin	0003_logentry_add_action_flag_choices	2025-06-23 12:40:38.875473+05:45
6	api	0001_initial	2025-06-23 12:40:38.882738+05:45
7	contenttypes	0002_remove_content_type_name	2025-06-23 12:40:38.895909+05:45
8	auth	0002_alter_permission_name_max_length	2025-06-23 12:40:38.902058+05:45
9	auth	0003_alter_user_email_max_length	2025-06-23 12:40:38.908544+05:45
10	auth	0004_alter_user_username_opts	2025-06-23 12:40:38.914094+05:45
11	auth	0005_alter_user_last_login_null	2025-06-23 12:40:38.920661+05:45
12	auth	0006_require_contenttypes_0002	2025-06-23 12:40:38.921847+05:45
13	auth	0007_alter_validators_add_error_messages	2025-06-23 12:40:38.927475+05:45
14	auth	0008_alter_user_username_max_length	2025-06-23 12:40:38.937749+05:45
15	auth	0009_alter_user_last_name_max_length	2025-06-23 12:40:38.944066+05:45
16	auth	0010_alter_group_name_max_length	2025-06-23 12:40:38.951517+05:45
17	auth	0011_update_proxy_permissions	2025-06-23 12:40:38.961964+05:45
18	auth	0012_alter_user_first_name_max_length	2025-06-23 12:40:38.968029+05:45
19	sessions	0001_initial	2025-06-23 12:40:38.97595+05:45
\.


--
-- TOC entry 5015 (class 0 OID 24722)
-- Dependencies: 237
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
zocovr1t3s3yzpgvorifn3eke77w7vun	.eJxVjMsOwiAQRf-FtSE8CmVcuvcbyDAwUjU0Ke3K-O_apAvd3nPOfYmI21rj1ssSpyzOQovT75aQHqXtIN-x3WZJc1uXKcldkQft8jrn8rwc7t9BxV6_NYFxHtklgxmKZUVcTFAQRgyEybHhNNAI1gF74JICKAtOe_SawmDF-wMA0Dgj:1uTfbq:QBxSWsWylmvWi_F2h25I_JgGA1YLDhx6esahvA8OuQo	2025-07-07 17:30:10.610611+05:45
\.


--
-- TOC entry 5021 (class 0 OID 0)
-- Dependencies: 235
-- Name: api_aicompletion_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.api_aicompletion_id_seq', 48, true);


--
-- TOC entry 5022 (class 0 OID 0)
-- Dependencies: 223
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- TOC entry 5023 (class 0 OID 0)
-- Dependencies: 225
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- TOC entry 5024 (class 0 OID 0)
-- Dependencies: 221
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 28, true);


--
-- TOC entry 5025 (class 0 OID 0)
-- Dependencies: 229
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- TOC entry 5026 (class 0 OID 0)
-- Dependencies: 227
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, true);


--
-- TOC entry 5027 (class 0 OID 0)
-- Dependencies: 231
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- TOC entry 5028 (class 0 OID 0)
-- Dependencies: 233
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- TOC entry 5029 (class 0 OID 0)
-- Dependencies: 219
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 7, true);


--
-- TOC entry 5030 (class 0 OID 0)
-- Dependencies: 217
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 19, true);


--
-- TOC entry 4836 (class 2606 OID 24713)
-- Name: api_aicompletion api_aicompletion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_aicompletion
    ADD CONSTRAINT api_aicompletion_pkey PRIMARY KEY (id);


--
-- TOC entry 4805 (class 2606 OID 24720)
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- TOC entry 4810 (class 2606 OID 24643)
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- TOC entry 4813 (class 2606 OID 24612)
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4807 (class 2606 OID 24604)
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- TOC entry 4800 (class 2606 OID 24634)
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- TOC entry 4802 (class 2606 OID 24598)
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- TOC entry 4821 (class 2606 OID 24626)
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4824 (class 2606 OID 24658)
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- TOC entry 4815 (class 2606 OID 24618)
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- TOC entry 4827 (class 2606 OID 24632)
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4830 (class 2606 OID 24672)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- TOC entry 4818 (class 2606 OID 24715)
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- TOC entry 4833 (class 2606 OID 24693)
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- TOC entry 4795 (class 2606 OID 24592)
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- TOC entry 4797 (class 2606 OID 24590)
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4793 (class 2606 OID 24584)
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4839 (class 2606 OID 24728)
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- TOC entry 4803 (class 1259 OID 24721)
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- TOC entry 4808 (class 1259 OID 24654)
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- TOC entry 4811 (class 1259 OID 24655)
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- TOC entry 4798 (class 1259 OID 24640)
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- TOC entry 4819 (class 1259 OID 24670)
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- TOC entry 4822 (class 1259 OID 24669)
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- TOC entry 4825 (class 1259 OID 24684)
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- TOC entry 4828 (class 1259 OID 24683)
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- TOC entry 4816 (class 1259 OID 24716)
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- TOC entry 4831 (class 1259 OID 24704)
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- TOC entry 4834 (class 1259 OID 24705)
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- TOC entry 4837 (class 1259 OID 24730)
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- TOC entry 4840 (class 1259 OID 24729)
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- TOC entry 4842 (class 2606 OID 24649)
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4843 (class 2606 OID 24644)
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4841 (class 2606 OID 24635)
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4844 (class 2606 OID 24664)
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4845 (class 2606 OID 24659)
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4846 (class 2606 OID 24678)
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4847 (class 2606 OID 24673)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4848 (class 2606 OID 24694)
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4849 (class 2606 OID 24699)
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


-- Completed on 2025-06-24 21:06:14

--
-- PostgreSQL database dump complete
--

